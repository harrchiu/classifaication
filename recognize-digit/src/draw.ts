import { w1, w2 } from './weights';

// prevent overflow?
const _exp = (x: number) => {
  const ans = Math.exp(x);
  if (!Number.isFinite(ans)) {
    console.log('returning', x, ans, Number.MAX_VALUE);
    return Number.MAX_VALUE - 1;
  }
  return ans;
};

const sigmoid = (mat: number[][]) => {
  for (let i = 0; i < mat.length; i++) {
    for (let j = 0; j < mat[0].length; j++) {
      mat[i][j] = 1 / (1 + _exp(-mat[i][j]));
    }
  }
  return mat;
};

const arrMax = (x: number[]) => {
  return Math.max.apply(null, x);
};
const arrSum = (x: number[]) => {
  return x.reduce((agg, val) => agg + val, 0);
};

const softmax = (x: number[]) => {
  const max = arrMax(x);
  const exp_element = x.map((val) => _exp(val - max));
  const sum = arrSum(exp_element);
  return exp_element.map((val) => val / sum);
};

const multiply = (mat1: number[][], mat2: number[][]) => {
  if (mat1?.[0].length !== mat2?.length) {
    console.log('dims do not match, ', mat1?.[0].length, mat2?.length);
    return [[]];
  }

  const rows = mat1.length;
  const cols = mat2[0].length;
  const res = new Array(rows).fill(0).map(() => new Array(cols).fill(0));
  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      for (let k = 0; k < mat1[0].length; k++) {
        res[i][j] += mat1[i][k] * mat2[k][j];
      }
    }
  }
  return res;
};

const test = [
  5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 121, 25, 0, 0, 13, 121, 121, 184, 253, 253, 253, 253, 253,
  253, 253, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 231, 252, 242, 240, 240, 241, 252, 252, 253, 252,
  252, 252, 252, 252, 252, 170, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 252, 252, 252, 252, 252, 252,
  252, 252, 253, 252, 252, 252, 252, 252, 252, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 252, 252,
  252, 252, 252, 252, 252, 252, 253, 252, 222, 172, 172, 172, 151, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 107, 252, 252, 252, 252, 252, 209, 185, 115, 53, 53, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 28, 205, 252, 252, 252, 252, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 79, 246, 252, 252, 252, 243, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 78, 205, 252, 252, 252, 247, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 28, 133, 248, 252, 252, 252, 85, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 82, 203, 252, 252, 253, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 15, 203, 253, 255, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 15, 202, 253, 247, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 133, 253, 252, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 133, 253, 252, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 67, 46, 0, 0, 0, 0, 0,
  133, 253, 252, 183, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 252, 231, 151, 54, 17,
  34, 61, 221, 253, 252, 252, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 234, 252, 252,
  252, 198, 223, 252, 252, 253, 252, 188, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
  248, 252, 252, 252, 252, 252, 252, 253, 241, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 202, 249, 252, 252, 252, 252, 252, 247, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 129, 252, 252, 252, 252, 181, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];
const [output, ...inp] = test;
const input = [inp];

export const eval_grid = (input: number[][]) => {
  const a = multiply(input, w1);
  const b = sigmoid(a);
  const c = multiply(b, w2);
  const d = softmax(c[0]);
  // console.log('a', a);
  // console.log('b', b);
  // console.log('c', c);
  // console.log('res', d);
  return d;
};
